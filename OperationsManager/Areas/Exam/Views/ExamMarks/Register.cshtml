@using OpMgr.Resources.Exam
@using OperationsManager.ExtendedHtmlHelpers
@model OperationsManager.Areas.Exam.Models.ExamMarksVM

@{
    Layout = "~/Views/Shared/_NewLayout.cshtml";
}

@section PageScripts{
    <script>
        $(document).ready(function () {

            $('.CourseFrom').datepicker({ dateFormat: 'dd-M-yy' });
            $('.CourseTo').datepicker({ dateFormat: 'dd-M-yy' });

            // If Selected Location , StandardSection and Subject Below Code will populate
            $("#CourseExam_CourseMapping_Location_LocationId").change(function () {
                var locationId = $("#CourseExam_CourseMapping_Location_LocationId").val();
                var StandardSectionId = $("#CourseExam_CourseMapping_StandardSection_StandardSectionId").val();
                var SubjectId = $("#CourseExam_CourseMapping_Subject_SubjectId").val();

                if (locationId > 0 && StandardSectionId > 0 && SubjectId > 0) {

                    GetCourseMappingDetails(locationId, StandardSectionId, SubjectId);
                }
                else if (StandardSectionId < 0) {
                    alert("Please Select Standard Section");
                }
                else if (SubjectId < 0) {
                    alert("Please Select Subject");
                }
                return false;
            });


            // If Selected Location , StandardSection and Subject Below Code will populate
            $("#CourseExam_CourseMapping_StandardSection_StandardSectionId").change(function () {
                var locationId = $("#CourseExam_CourseMapping_Location_LocationId").val();
                var StandardSectionId = $("#CourseExam_CourseMapping_StandardSection_StandardSectionId").val();
                var SubjectId = $("#CourseExam_CourseMapping_Subject_SubjectId").val();

                if (locationId > 0 && StandardSectionId > 0 && SubjectId > 0) {
                    GetCourseMappingDetails(locationId, StandardSectionId, SubjectId);
                }
                else if (locationId < 0) {
                    alert("Please Select Location");
                }
                else if (SubjectId < 0) {
                    alert("Please Select Subject");
                }
                return false;
            });

            // If Selected Location , StandardSection and Subject Below Code will populate
            $("#CourseExam_CourseMapping_Subject_SubjectId").change(function () {
                var locationId = $("#CourseExam_CourseMapping_Location_LocationId").val();
                var StandardSectionId = $("#CourseExam_CourseMapping_StandardSection_StandardSectionId").val();
                var SubjectId = $("#CourseExam_CourseMapping_Subject_SubjectId").val();

                if (locationId > 0 && StandardSectionId > 0 && SubjectId > 0) {

                    GetCourseMappingDetails(locationId, StandardSectionId, SubjectId);
                }
                else if (locationId < 0) {
                    alert("Please Select Location");
                }
                else if (StandardSectionId < 0) {
                    alert("Please Select Standard Section");
                }
                return false;
            });


            // If Selected ExamType , ExamSubType and CourseMappingId(hdncoursemapid) > 0 then will get ExamRuleId
            $("#CourseExam_ExamType_ExamTypeId").change(function () {
                var ExamTypeId = $("#CourseExam_ExamType_ExamTypeId").val();
                var ExamSubTypeId = $("#CourseExam_ExamSubType_ExamSubTypeId").val();
                var CourseMapId = document.getElementById("hdncoursemapid").value;
                if (ExamTypeId > 0 && ExamSubTypeId > 0 && CourseMapId > 0) {
                    GetExamRuleDetails(ExamTypeId, ExamSubTypeId, CourseMapId);
                }

                return false;
            });

            // If Selected ExamType , ExamSubType and CourseMappingId(hdncoursemapid) > 0 then will get ExamRuleId
            $("#CourseExam_ExamSubType_ExamSubTypeId").change(function () {
                debugger;
                var ExamTypeId = $("#CourseExam_ExamType_ExamTypeId").val();
                var ExamSubTypeId = $("#CourseExam_ExamSubType_ExamSubTypeId").val();
                var CourseMapId = document.getElementById("hdncoursemapid").value;
                alert(document.getElementById("hdncoursemapid").value);
                if (ExamTypeId > 0 && ExamSubTypeId > 0 && CourseMapId > 0) {
                    GetExamRuleDetails(ExamTypeId, ExamSubTypeId, CourseMapId);
                }

                return false;
            });

        });

        function GetCourseMappingDetails(locationId, StandardSectionId, SubjectId) {

            var coursemap = new Object();
            coursemap.Location = new Object();
            coursemap.StandardSection = new Object();
            coursemap.Subject = new Object();
            coursemap.Employee = new Object();
            coursemap.Location.LocationId = locationId;
            coursemap.StandardSection.StandardSectionId = StandardSectionId;
            coursemap.Subject.SubjectId = SubjectId;
            coursemap.Employee.EmployeeId = document.getElementById("hdnEmployeeId").value;

            $.ajax({

                type: 'POST',
                url: 'GetCourseMappingDetails',
                dataType: "json",
                data: coursemap,
                success: function (resultData) { getcoursemappingDetails_callback(resultData); },
                error: function (error) { }
            });
        }

        function getcoursemappingDetails_callback(result) {
            if (result.status) {
                debugger;
                var FromDate = result.FromDateString;
                var ToDate = result.ToDateString;
                var data = result.data;

                document.getElementById("hdncoursemapid").value = data.CourseMappingId;
                alert(document.getElementById("hdncoursemapid").value);
                document.getElementById("FromDateString").value = FromDate;
                document.getElementById("ToDateString").value = ToDate;
            }
        }

        function GetExamRuleDetails(ExamTypeId, ExamSubTypeId, CourseMapId) {

            var courseexam = new Object();
            courseexam.ExamType = new Object();
            courseexam.ExamSubType = new Object();
            courseexam.CourseMapping = new Object();

            courseexam.ExamType.ExamTypeId = ExamTypeId;
            courseexam.ExamSubType.ExamSubTypeId = ExamSubTypeId;
            courseexam.CourseMapping.CourseMappingId = CourseMapId;
            debugger;
            $.ajax({

                type: 'POST',
                url: 'GetExamRuleDetails',
                dataType: "json",
                data: courseexam,
                success: function (resultData) { getcourseExamDetails_callback(resultData); },
                error: function (error) { }
            });
        }

        function getcourseExamDetails_callback(result) {
            debugger;
            if (result.status) {

                var data = result.data;
                document.getElementById("hdnExamRuleId").value = data.ExamRuleId;
                alert(data.ExamRuleId);
                if (data.ExamRuleId > 0) {
                    var locationId = $("#CourseExam_CourseMapping_Location_LocationId").val();
                    var StandardSectionId = $("#CourseExam_CourseMapping_StandardSection_StandardSectionId").val();
                    alert(locationId);
                    alert(StandardSectionId);
                    if (locationId > 0 && StandardSectionId > 0) {
                        GetStudentDetailsMarks(locationId, StandardSectionId);
                    }

                }
            }
        }

        function GetStudentDetailsMarks(locationId, StandardSectionId) {

            var coursemap = new Object();
            coursemap.Location = new Object();
            coursemap.StandardSection = new Object();

            coursemap.Location.LocationId = locationId;
            coursemap.StandardSection.StandardSectionId = StandardSectionId;

            $.ajax({

                type: 'POST',
                url: 'GetStudentDetailsMarks',
                dataType: "json",
                data: coursemap,
                success: function (resultData) { studentmarksentry(resultData); },
                error: function (error) { }
            });
        }

        function studentmarksentry(result) {

        }

    </script>
}
<div class="row">
    <div class="col-lg-12">
        <div class="panel panel-default">
            <div class="panel-heading"><b></b></div>
            <div class="panel-body">

                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()
                    <fieldset>
                        <div class="col-lg-5">
                            @Html.OpMgrDropDownListFor(m => m.CourseExam.CourseMapping.Location.LocationId, Model.LocationList, ExamMarks.Location, new { @class = "form-control" })
                        </div>
                        <div class="col-lg-5">
                            @Html.OpMgrDropDownListFor(m => m.CourseExam.CourseMapping.StandardSection.StandardSectionId, Model.StandardSectionList, ExamMarks.StandardSectionId, new { @class = "form-control" })
                        </div>
                        <div class="col-lg-5">
                            @Html.OpMgrDropDownListFor(m => m.CourseExam.CourseMapping.Subject.SubjectId, Model.SubjectList, ExamMarks.Subject, new { @class = "form-control" })
                        </div>
                        <div class="col-lg-5">
                            @Html.OpMgrDropDownListFor(m => m.CourseExam.ExamType.ExamTypeId, Model.ExamTypeList, ExamMarks.ExamType, new { @class = "form-control" })
                        </div>
                        <div class="col-lg-5">
                            @Html.OpMgrDropDownListFor(m => m.CourseExam.ExamSubType.ExamSubTypeId, Model.ExamSubTypeList, ExamMarks.ExamSubType, new { @class = "form-control" })
                        </div>
                        <div class="col-lg-5">
                            @Html.OpMgrTextBoxFor(m => m.FromDateString, ExamMarks.CourseFrom, new { @class = "CourseFrom form-control", data_rule_required = "true", data_msg_required = "Course Start Date is Required" })
                        </div>
                        <div class="col-lg-5">
                            @Html.OpMgrTextBoxFor(m => m.ToDateString, ExamMarks.CourseTo, new { @class = "CourseTo form-control", data_rule_required = "true", data_msg_required = "Course End Date is Required" })
                            @Html.HiddenFor(m => m.hdnEmployeeId)
                            @Html.HiddenFor(m => m.hdncoursemapid)
                            @Html.HiddenFor(m => m.hdnExamRuleId)
                        </div>

                        <div class="col-lg-4">
                            <button type="submit" class="btn btn-primary">@ExamMarks.Submit</button>
                        </div>
                    </fieldset>
                }
            </div>
        </div>

        @*<div class="panel panel-color panel-primary">
            <div class="panel-heading">

                <b>@ExamMarks.StudentMarksMaeding</b>

            </div>
            <div class="panel-body">

                <div style="overflow:scroll;">
                    <table id="tablePayment" class="table table table-striped table-bordered table-responsive table-hover " border="1" data-toggle="table" data-url="tables/data1.json" data-show-refresh="true" data-show-toggle="true" data-show-columns="true" data-search="true" data-select-item-name="toolbar1" data-pagination="true" data-sort-name="name" data-sort-order="desc">
                        <thead>
                            <tr>
                                <th th data-field="name" data-sortable="true">
                                    @ExamMarks.StudentName
                                </th>
                                <th h data-field="Location" data-sortable="true">
                                    @ExamMarks.Location
                                </th>
                                <th h data-field="RegistrationNo" data-sortable="true">
                                    @ExamMarks.RegistrationNo
                                </th>
                                <th th data-field="RollNumber" data-sortable="true">
                                    @ExamMarks.RollNumber
                                </th>
                                <th th data-field="StandardSectionId" data-sortable="true">
                                    @ExamMarks.StandardSectionId
                                </th>
                                <th th data-field="Obtainedmarks" data-sortable="true">
                                    @ExamMarks.ObtainedMarks
                                </th>
                                <th th data-field="Calculatedmarks" data-sortable="true">
                                    @ExamMarks.CalculatedMarks
                                </th>
                            </tr>
                        </thead>
                        <tbody>

                            @for (int i = 0; i < Model.ExamMarksList.Count; i++)
                            {
                                <tr>
                                    <td>
                                        @Model.ExamMarksList[i].Student.UserDetails.FName + " " + @Model.ExamMarksList[i].Student.UserDetails.LName

                                    </td>
                                    <td>
                                        @Model.ExamMarksList[i].Student.UserDetails.Location.LocationDescription
                                    </td>
                                    <td>
                                        @Model.ExamMarksList[i].Student.RegistrationNumber
                                    </td>
                                    <td>
                                        @Model.ExamMarksList[i].Student.RollNumber
                                    </td>
                                    <td>
                                        @Model.ExamMarksList[i].Student.StandardSectionMap.StandardSectionDesc
                                    </td>

                                    <td>

                                        @Html.OpMgrTextBoxFor(m => m.ExamMarksList[i].MarksObtained, "", new { @class = "form-control requiredField", onchange = "calcMarks(this,'staffRating_" + i + "_" + i + "'," + Model.ExamMarksList[i].MarksObtained + ",'staffRating');" })

                                    </td>
                                    <td>
                                        @Html.OpMgrTextBoxFor(m => m.ExamMarksList[i].MarksObtained, "", new { @class = "form-control requiredField" })
                                    </td>
                                </tr>
                            }
                        </tbody>

                    </table>
                </div>


            </div>
        </div>*@
    </div>

</div>

